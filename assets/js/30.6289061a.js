(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{419:function(t,a,s){"use strict";s.r(a);var v=s(2),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" Http")]),t._v(" "),s("h3",{attrs:{id:"http报文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http报文"}},[t._v("#")]),t._v(" http报文")]),t._v(" "),s("p",[t._v("http报文结构具体如下：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("起始行 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" 头部 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" 空行 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" 实体\n")])])]),s("h4",{attrs:{id:"起始行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#起始行"}},[t._v("#")]),t._v(" 起始行")]),t._v(" "),s("p",[t._v("对于请求报文而言，起始行类似下面这样")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("home "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n")])])]),s("p",[t._v("也就是"),s("strong",[t._v("方法 + 路径+ http版本")])]),t._v(" "),s("p",[t._v("对于响应报文来说，起始行一般长这样")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v("\n")])])]),s("p",[t._v("由"),s("strong",[t._v("http版本 + 状态码 + 原因")]),t._v("组成")]),t._v(" "),s("h4",{attrs:{id:"头部"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#头部"}},[t._v("#")]),t._v(" 头部")]),t._v(" "),s("p",[t._v("请求头和响应头中包含较多的字段，具体可查看:")]),t._v(" "),s("p",[t._v("https://kb.cnblogs.com/page/92320/")]),t._v(" "),s("h4",{attrs:{id:"空行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空行"}},[t._v("#")]),t._v(" 空行")]),t._v(" "),s("p",[t._v("很重要，用来区分开"),s("strong",[t._v("头部")]),t._v("和"),s("strong",[t._v("实体")])]),t._v(" "),s("p",[t._v("如果在头部中间故意加一个空行，那么空行后面的内容都会被视作实体")]),t._v(" "),s("h4",{attrs:{id:"实体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实体"}},[t._v("#")]),t._v(" 实体")]),t._v(" "),s("p",[t._v("具体的数据，body部分。请求报文对应的是请求体，响应报文对应的是响应体")]),t._v(" "),s("h4",{attrs:{id:"例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),s("p",[t._v("请求")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/png/22799595/1644202209503-b1e3b639-a82d-476e-aa08-ab833d166b97.png",alt:"img"}})]),t._v(" "),s("p",[t._v("响应")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/png/22799595/1644202228731-fd563fa2-e872-4274-94a3-739e4bad505a.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"请求方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求方法"}},[t._v("#")]),t._v(" 请求方法")]),t._v(" "),s("p",[s("strong",[t._v("http/1.1")]),t._v("规定了以下请求方法，注意都是大写")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("GET：通常用来获取资源")])]),t._v(" "),s("li",[s("p",[t._v("HEAD：获取资源的元信息")])]),t._v(" "),s("li",[s("p",[t._v("POST：提交数据，即上传数据")])]),t._v(" "),s("li",[s("p",[t._v("PUT：修改数据")])]),t._v(" "),s("li",[s("p",[t._v("DELETE：删除资源（几乎用不到）")])]),t._v(" "),s("li",[s("p",[t._v("CONNECT：建立连接隧道，用于代理服务器")])]),t._v(" "),s("li",[s("p",[t._v("OPTIONS：列出可对资源实行的请求方法，一般浏览器用于跨域前的预请求，判断是否可以与服务端通信")])]),t._v(" "),s("li",[s("p",[t._v("TRACE：追踪请求-响应的传输路径")])])]),t._v(" "),s("h4",{attrs:{id:"get和post的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get和post的区别"}},[t._v("#")]),t._v(" GET和POST的区别")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("TCP层面")])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("GET产生一个TCP数据包，对于GET方式的请求，浏览器会把http的header和data一并发送出去，服务器响应200")])]),t._v(" "),s("li",[s("p",[t._v("POST产生两个TCP数据包，对于POST，浏览器会先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200")])]),t._v(" "),s("li",[s("p",[t._v("并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次")])])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("HTTP规定")])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("语义不同，GET是获取数据，POST是提交数据")])]),t._v(" "),s("li",[s("p",[t._v("GET在浏览器回退是无害的，而POST是会再次提交数据")])]),t._v(" "),s("li",[s("p",[t._v("缓存机制不同")])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("GET请求会被浏览器主动"),s("code",[t._v("cache")]),t._v("，也就是主动缓存，而POST不会，除非手动设置")]),t._v(" "),s("li",[t._v("GET请求参数会被完整地保留在浏览器历史记录里面，而POST中的参数不会被保留")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("GET产生的URL地址可以被"),s("code",[t._v("Bookmark")]),t._v("，也就是进行书签收藏，有助于迅速查找，而POST不可以")])])]),t._v(" "),s("li",[s("p",[t._v("编码方式不同")])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("GET请求只能进行URL编码（application/x-www-form-urlencoded）")]),t._v(" "),s("li",[t._v("POST支持多种编码方式（application/x-www-form-urlencoded或multipart/form-data）")])])]),t._v(" "),s("li",[s("p",[t._v("GET参数通过URL传递，POST放在Request body中")])]),t._v(" "),s("li",[s("p",[t._v("对参数的数据类型，GET只接受ASCII字符，而POST没有限制")])])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("浏览器层面")])])]),t._v(" "),s("ul",[s("li",[t._v("GET请求在URL中传送参数是有长度限制的，不同浏览器的限制大小不一样，而POST没有限制")])]),t._v(" "),s("h3",{attrs:{id:"url和uri的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#url和uri的区别"}},[t._v("#")]),t._v(" URL和URI的区别")]),t._v(" "),s("p",[s("strong",[t._v("统一资源标识符URI")]),t._v("就是在某一规则下能把一个资源独一无二地标识出来。")]),t._v(" "),s("p",[t._v("拿人做例子，一个人的身份证就是URI，因为通过身份证能让我们能且仅能缺点一个人。")]),t._v(" "),s("p",[s("strong",[t._v("统一资源定位符URL")]),t._v("，比如说：")]),t._v(" "),s("p",[t._v("动物住址协议://地球/中国/浙江省/杭州市/"),s("a",{attrs:{href:"https://www.zhihu.com/search?q=%E8%A5%BF%E6%B9%96%E5%8C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A154309494%7D",target:"_blank",rel:"noopener noreferrer"}},[t._v("西湖区"),s("OutboundLink")],1),t._v("/某大学/14号宿舍楼/525号寝/张三.人")]),t._v(" "),s("p",[t._v("这样的一个字符串同样也唯一确定了一个人，起到了URI的作用，所以"),s("strong",[t._v("URL是URI的子集")])]),t._v(" "),s("p",[t._v("可以这样理解：URI不一定非得是通过号码去确定，URI是在"),s("strong",[t._v("某一规则")]),t._v("下标识出一个资源的字符串，通过地址或者号码都是可行的规则，其中通过地址规则实现的URI就被称作URL，URL是URI的一种实现，就像三角形包含等边三角形一样")]),t._v(" "),s("h3",{attrs:{id:"http状态码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" HTTP状态码")]),t._v(" "),s("h4",{attrs:{id:"_1xx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1xx"}},[t._v("#")]),t._v(" 1xx")]),t._v(" "),s("p",[t._v("表示目前是协议处理的中间状态，还需要后续操作")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("100")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("表示目前为止一切正常，客户端应该继续请求，如果已完成请求则忽略")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("101")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("表示服务器应客户端升级协议的请求正在进行协议切换，如切换成websocket或http2.0")])])])]),t._v(" "),s("h4",{attrs:{id:"_2xx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2xx"}},[t._v("#")]),t._v(" 2xx")]),t._v(" "),s("p",[t._v("表示成功的状态")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("200")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("表示请求已经成功，默认情况下状态码为200的响应可以被缓存")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("201")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("表示请求已经被成功处理，并且创建了新的资源，新的资源在应答返回之前已经被创建")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("204")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("结果正确处理了，但是服务端没数据给客户端，即响应报文没有实体主体，一般用于服务器接受客户端消息，但不必回复内容的情况")]),t._v(" "),s("li",[t._v("在PUT请求中进行资源更新，但不需要改变当前展示给用户的页面，那么返回"),s("code",[t._v("204 No Content")]),t._v("。如果创建了新资源，那么返回"),s("code",[t._v("201 Created")]),t._v("。如果页面需要更新以后的新资源，返回"),s("code",[t._v("200 OK")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("206")])])]),t._v(" "),s("li",[s("ul",[s("li",[s("code",[t._v("206 Partial Content")]),t._v("，表示部分内容，该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求，响应报文中包含由"),s("code",[t._v("Content-Range")]),t._v("指定范围的实体内容。")])])])]),t._v(" "),s("h4",{attrs:{id:"_3xx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3xx"}},[t._v("#")]),t._v(" 3xx")]),t._v(" "),s("p",[t._v("重定向状态，资源位置发生变动，需要重新请求")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("301&302")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("301表示永久重定向，说明请求的资源已经被移动到了由Location头部指定的url上，是固定的不会再改变，搜索引擎会根据该响应修正；而302表示的是临时重定向。")]),t._v(" "),s("li",[t._v("比如网站从HTTP升级到了HTTPS，以前的站点不再用了，应当返回"),s("code",[t._v("301")]),t._v("，这个时候浏览器会默认做缓存优化，第二次访问的时候会自动访问重定向的那个地址，而如果只是暂时不可用，那么返回"),s("code",[t._v("302")]),t._v("即可，和"),s("code",[t._v("301")]),t._v("不同的是浏览器并不会做缓存")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("303")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("效果和302一样。但是他明确规定了浏览器要用GET方法去访问新提供的URI")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("304")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("该状态码和重定向没有关系，而是走缓存路线，该状态码意味着命中了协商缓存")]),t._v(" "),s("li",[t._v("说明所请求的资源在客户端本地未修改，服务器无需再次传输请求的内容，客户端可以直接使用缓存的内容")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("307")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("临时重定向，类似302，区别在于能够确保请求方法和消息主体不会发生改变")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("308")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("永久重定向，类似301，区别在于能够确保请求方法和消息主体不会发生改变")])])])]),t._v(" "),s("h4",{attrs:{id:"_4xx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4xx"}},[t._v("#")]),t._v(" 4xx")]),t._v(" "),s("p",[t._v("请求报文有误")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("400")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("开发者经常看到一头雾水，只是笼统地提示了一下错误，并不知道哪里出错了，一般是请求参数格式错误")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("401")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("请求需要认证的资源，但还没有认证，需要在请求主体加应该请求头：Authentic，实际情况中比如是忘记带token")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("403")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("实际上并不是请求报文出错，而是服务器禁止访问，一般是因为权限不够")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("404")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("表面服务器上没有这个资源")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("405")])])]),t._v(" "),s("li",[s("ul",[s("li",[s("code",[t._v("405 Method Not Allowed")]),t._v("，表面服务器禁止了使用当前HTTP方法的请求，一般是请求方法错了")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("406")])])]),t._v(" "),s("li",[s("ul",[s("li",[s("code",[t._v("406 Not Acceptable")]),t._v("，表示服务器不支持Accept、Accept-Charset、Accept-Encoding、 Accept-Language header 所要求的")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("408")])])]),t._v(" "),s("li",[s("ul",[s("li",[s("code",[t._v("408 Request Timeout")]),t._v("服务器等待时间太长")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("409")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("请求发生了冲突")]),t._v(" "),s("li",[t._v("冲突最有可能发生在对PUT请求的响应中，例如当上传文件的版本比服务器上已存在的要旧时，从而导致版本冲突，那么就可能收到409的响应")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("410")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("说明请求的内容在服务器上不存在，同时是永久性丢失，如果不清楚是否为永久性或临时性丢失，则应该使用404")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("413")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("表示"),s("strong",[t._v("请求主体")]),t._v("的大小超过了服务器愿意或有能力处理的限度，服务器可能会关闭连接以防止客户端继续发送请求")]),t._v(" "),s("li",[t._v("如果“超出限度”是暂时性的，服务器应该返回"),s("code",[t._v("Retry-After")]),t._v("首部字段，说明这是暂时性的，以及客户端可以在什么时间后重试")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("414")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("URI过长，表示客户端所请求的URI超过了服务器允许的范围")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("431")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("由于"),s("strong",[t._v("请求中的首部字段")]),t._v("的值太大，服务器拒绝接受客户端的请求")])])])]),t._v(" "),s("h4",{attrs:{id:"_5xx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5xx"}},[t._v("#")]),t._v(" 5xx")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("500")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("服务器内部发生错误，出了啥错我们也不知道")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("501")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("服务器不支持请求的功能，无法完成请求，表示method不被服务器支持，无法处理。这里要和"),s("code",[t._v("405 Method Not Allowed")]),t._v("区分，405是服务器本身支持这个请求方法，但是请求接口时却用了别的方法，例如应该用put却用了delete，就返回405")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("502")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("网关错误，服务器自身的正常的。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("503")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("表示服务器尚未处于可以接受请求的状态，通常造成这种情况的原因是由于服务器停机维护或已超载。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("505")])])]),t._v(" "),s("li",[s("ul",[s("li",[t._v("服务器不支持请求的HTTP协议的版本")])])])]),t._v(" "),s("h3",{attrs:{id:"http如何处理大文件的传输"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http如何处理大文件的传输"}},[t._v("#")]),t._v(" HTTP如何处理大文件的传输")]),t._v(" "),s("p",[t._v("对于几百M甚至上G的大文件来说，如果要一口气全部传输过来显示是不现实的，会有大量的等待时间，严重影响用户体验。HTTP针对这一场景采取了"),s("code",[t._v("范围请求")]),t._v("的解决方案，允许客户端仅请求一个资源的一部分。")]),t._v(" "),s("h4",{attrs:{id:"如何支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何支持"}},[t._v("#")]),t._v(" 如何支持")]),t._v(" "),s("p",[t._v("服务器要支持**范围请求，**要加上这样一个响应头")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Accept"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Ranges"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" none\n")])])]),s("h4",{attrs:{id:"range字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#range字段"}},[t._v("#")]),t._v(" Range字段")]),t._v(" "),s("p",[t._v("对于客户端而言，它需要指定请求哪一部分，通过"),s("code",[t._v("Range")]),t._v("这个请求头字段确定，格式为"),s("code",[t._v("bytes=x-y")]),t._v("。如0-499表示从开始到第499个字节。")]),t._v(" "),s("p",[t._v("服务器收到请求后，如果越界了，则返回"),s("code",[t._v("416")]),t._v("错误码，否则读取响应的片段，返回"),s("code",[t._v("206")]),t._v("状态码。")]),t._v(" "),s("p",[s("strong",[t._v("举例")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单段数据")]),t._v("\nRange"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多段数据")]),t._v("\nRange"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),t._v("\n")])])]),s("p",[s("strong",[t._v("单段数据")])]),t._v(" "),s("p",[t._v("单段数据的请求，返回的响应如下：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("206")]),t._v(" Partial Content\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nAccept"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Ranges"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Range"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n\ni am xxxxx\n")])])]),s("p",[t._v("0-9表示请求的返回，100表示资源的总大小")]),t._v(" "),s("p",[s("strong",[t._v("多段数据")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("206")]),t._v(" Partial Content\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" multipart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("byteranges"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" boundary"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000010101")]),t._v("\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("189")]),t._v("\nConnection"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" keep"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("alive\nAccept"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Ranges"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes\n\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000010101")]),t._v("\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("plain\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Range"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("96")]),t._v("\n\ni am xxxxx\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000010101")]),t._v("\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("plain\nContent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Range"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("96")]),t._v("\n\neex jspy e\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00000010101")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n")])])]),s("p",[t._v("使用"),s("code",[t._v("boundary")]),t._v("进行分割，最后的分隔符会添加"),s("code",[t._v("--")]),t._v("表示结束")]),t._v(" "),s("h3",{attrs:{id:"什么是持久连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是持久连接"}},[t._v("#")]),t._v(" 什么是持久连接")]),t._v(" "),s("p",[s("code",[t._v("http1.0")]),t._v("协议采用的是“请求——应答”模式，当使用普通模式，每个请求/应答，客户都要与服务端建立一个连接，完成之后立即断开连接（http协议为无连接协议）")]),t._v(" "),s("p",[s("code",[t._v("http1.1")]),t._v("支持长连接，即请求头添加"),s("code",[t._v("Connection:Keep-Alive")]),t._v("，使用Keep-Alive模式建立一个"),s("code",[t._v("TCP")]),t._v("连接后使客户端到服务端的连接持续有效，可以发送多个请求，当出现对服务器的后续请求时，"),s("code",[t._v("Keep-Alive")]),t._v("功能能避免重新建立连接")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/webp/22799595/1644225620358-39d3dfb8-86c5-4732-9fd1-ecf0cb2f1adc.webp",alt:"img"}})]),t._v(" "),s("h4",{attrs:{id:"长连接优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#长连接优缺点"}},[t._v("#")]),t._v(" 长连接优缺点")]),t._v(" "),s("p",[s("strong",[t._v("优点")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("减少CPU以及内存的使用，因为不需要经常建立和关闭连接")])]),t._v(" "),s("li",[s("p",[t._v("支持管道化的请求以及响应模式")])]),t._v(" "),s("li",[s("p",[t._v("减少网络堵塞，因为减少了TCP请求")])]),t._v(" "),s("li",[s("p",[t._v("发生错误时，也可以在不关闭连接的情况下进行错误提示")])])]),t._v(" "),s("p",[s("strong",[t._v("缺点")])]),t._v(" "),s("ul",[s("li",[t._v("一个长连接建立后，如果一直保持连接，会浪费服务器的资源，可以在服务端配置"),s("code",[t._v("keepalive_timeout")]),t._v("设置长连接超时时间")]),t._v(" "),s("li",[t._v("可能造成队头阻塞")])]),t._v(" "),s("h3",{attrs:{id:"什么是管道化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是管道化"}},[t._v("#")]),t._v(" 什么是管道化")]),t._v(" "),s("p",[s("code",[t._v("http1.1")]),t._v("在使用"),s("code",[t._v("长连接")]),t._v("的情况下，建立一个连接通信后，连接上消息的传递类似于")]),t._v(" "),s("p",[t._v("请求1 -> 响应1 -> 请求2 -> 响应2")]),t._v(" "),s("p",[t._v("管道化连接的消息就变成了类似这样")]),t._v(" "),s("p",[t._v("请求1 -> 请求2 -> 响应1 -> 响应2")]),t._v(" "),s("p",[t._v("管道化是在同一个TCP连接里"),s("strong",[t._v("发一个请求后不必等其回来就可以继续发送请求出去")]),t._v("，这样可以减少整体响应的时间，但是"),s("strong",[t._v("服务器还是会安装请求的顺序响应")]),t._v("，如果有许多请求，而前面的请求响应比较慢，就会造成队头阻塞")]),t._v(" "),s("h3",{attrs:{id:"http1-1如何解决http的队头阻塞问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http1-1如何解决http的队头阻塞问题"}},[t._v("#")]),t._v(" HTTP1.1如何解决HTTP的队头阻塞问题")]),t._v(" "),s("h4",{attrs:{id:"什么是队头阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是队头阻塞"}},[t._v("#")]),t._v(" 什么是队头阻塞")]),t._v(" "),s("p",[t._v("由于HTTP传输是基于"),s("code",[t._v("请求-应答")]),t._v("的模式进行的，报文必须是一发一收，但值得注意的是，里面的任务被放在了一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理，这就是著名的"),s("strong",[t._v("HTTP队头阻塞问题。")])]),t._v(" "),s("h4",{attrs:{id:"并发连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发连接"}},[t._v("#")]),t._v(" 并发连接")]),t._v(" "),s("p",[t._v("对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其他所有任务。现在浏览器的标准中Chrome可以同时支持6个并发连接。")]),t._v(" "),s("h4",{attrs:{id:"域名分片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#域名分片"}},[t._v("#")]),t._v(" 域名分片")]),t._v(" "),s("p",[t._v("既然一个域名可以支持6个长连接，那么可以多分配几个域名。比如"),s("code",[t._v("content1.runhio.com``content2.runhio.com")]),t._v("。这样一个runhio域名下可以分出非常多的二级域名，它们都指向了同样的一台服务器，能够并发的长连接就更多了。")]),t._v(" "),s("h3",{attrs:{id:"http代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http代理"}},[t._v("#")]),t._v(" HTTP代理")]),t._v(" "),s("p",[t._v("常见的代理有两种："),s("code",[t._v("普通代理")]),t._v("，"),s("code",[t._v("隧道代理")])]),t._v(" "),s("h4",{attrs:{id:"普通代理-中间人代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通代理-中间人代理"}},[t._v("#")]),t._v(" 普通代理（中间人代理）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/webp/22799595/1644227445321-6120f43c-a4a5-41d8-8f9a-16defc8a6f77.webp",alt:"img"}})]),t._v(" "),s("p",[t._v("如图，代理服务器就像一个中间人，帮两边传递信息。不过他可以在中间帮我们过滤、缓存、负载均衡等一些处理。")]),t._v(" "),s("p",[t._v("实际场景中客户端和服务器之间可以有多个代理服务器")]),t._v(" "),s("h4",{attrs:{id:"隧道代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隧道代理"}},[t._v("#")]),t._v(" 隧道代理")]),t._v(" "),s("p",[t._v("客户端通过"),s("code",[t._v("CONNECT")]),t._v("方法请求隧道代理创建一个可以到任意目标服务器和端口号的TCP连接，创建成功之后隧道代理只做请求和响应数据的转发，在中间不做任何处理")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/webp/22799595/1644227557881-5e5b32a0-13cc-4b7b-832d-a2efcac852ea.webp",alt:"img"}})]),t._v(" "),s("p",[s("code",[t._v("https")]),t._v("服务是需要证书的，而代理服务器显然没有，所以浏览器和代理之间无法创建"),s("code",[t._v("TLS")]),t._v("，所以就有了隧道代理，它把浏览器的数据原样传统，实现了通过中间代理和服务端进行TLS握手，再进行数据加密传输。")]),t._v(" "),s("h4",{attrs:{id:"代理服务器的好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代理服务器的好处"}},[t._v("#")]),t._v(" 代理服务器的好处")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("突破访问限制")]),t._v("：如访问一些单位或集团的内部资源，或用国外代理服务器，也就是翻墙")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("安全性更高")]),t._v("：上网者可以通过这种方式隐藏自己的IP")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("负载均衡")]),t._v("：客户端请求先到代理服务器，而代理服务器后面有多少源服务器，IP是多少，客户端是不知道的。因此，代理服务器收到请求后，根据特定算法把请求分发给不同服务器，让各个源服务器负载尽量均衡")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("缓存代理")]),t._v("：将内容缓存到代理服务器")])])]),t._v(" "),s("h4",{attrs:{id:"代理常见的请求头"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代理常见的请求头"}},[t._v("#")]),t._v(" 代理常见的请求头")]),t._v(" "),s("p",[s("strong",[t._v("Via")])]),t._v(" "),s("p",[t._v("代理服务器通过"),s("code",[t._v("Via")]),t._v("字段来记录自己的痕迹。举个例子，现在中间有两台代理服务器：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("客户端 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 代理"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 代理"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 源服务器\n")])])]),s("p",[t._v("在源服务器收到请求后，会在"),s("code",[t._v("请求头")]),t._v("拿到这个字段：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Via"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" proxy_server1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" proxy_server2\n")])])]),s("p",[t._v("而源服务器响应时，最终在客户端会拿到这样的"),s("code",[t._v("响应头")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Via"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" proxy_server2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" proxy_server1\n")])])]),s("p",[s("strong",[t._v("X-Forwarded-For")])]),t._v(" "),s("p",[t._v("记录客户端请求的来源IP，每经过一级代理，代理服务器都会把这次请求的来源IP追加进去")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("X")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Forwarded"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("For"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("proxy1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("proxy2\n")])])]),s("p",[s("strong",[t._v("X-Real-IP")])]),t._v(" "),s("p",[t._v("不管中间经过多少代理，这个字段始终记录的是客户端最初的IP")]),t._v(" "),s("p",[s("strong",[t._v("X-Forwarded-For的问题")])]),t._v(" "),s("p",[t._v("这个字段意味着每经过一个不同的代理，这个字段的名字都要变，从"),s("code",[t._v("客户端")]),t._v("到"),s("code",[t._v("代理1")]),t._v("，这个字段是客户端的IP，从"),s("code",[t._v("代理1")]),t._v("到"),s("code",[t._v("代理2")]),t._v("又要改变这个字段。")]),t._v(" "),s("p",[t._v("这就会产生两个问题：")]),t._v(" "),s("ul",[s("li",[t._v("代理必须解析HTTP请求头，然后修改，比直接转发数据性能下降")]),t._v(" "),s("li",[t._v("HTTPS通信过程中原始报文不允许修改")])]),t._v(" "),s("h3",{attrs:{id:"http缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http缓存"}},[t._v("#")]),t._v(" HTTP缓存")]),t._v(" "),s("p",[t._v("就是将http请求获取的页面资源存储在本地，之后再加载直接从缓存中获取而不用请求服务器，从而响应更快。")]),t._v(" "),s("h4",{attrs:{id:"强缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),s("p",[t._v("第一次请求时，服务器把资源的过期时间通过响应头中的"),s("code",[t._v("Expires")]),t._v("和"),s("code",[t._v("Cache-Control")]),t._v("两个字段告诉浏览器，之后再请求这个资源时，会判断有没有过期，没有过期就直接拿来用，不向服务器发起请求，这就是强缓存。")]),t._v(" "),s("p",[s("strong",[t._v("Expires")])]),t._v(" "),s("p",[t._v("用来指定资源到期的时间，服务器响应时把它添加到响应头中：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("expires"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Wed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" Nov "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("08")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("41")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GMT")]),t._v("\n")])])]),s("p",[s("strong",[t._v("Cache-Control")])]),t._v(" "),s("p",[t._v("指定资源过期的时间，如下表示这个请求正确返回的300s内，资料可以使用，否则过期")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("cache"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("max"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),t._v("\n")])])]),s("p",[s("strong",[t._v("Expires和Cache-Control的区别")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Expires是"),s("code",[t._v("HTTP/1.0")]),t._v("中的，Cache-Control是"),s("code",[t._v("HTTP/1.1")]),t._v("中的")])]),t._v(" "),s("li",[s("p",[t._v("Expires是为了兼容，在不支持"),s("code",[t._v("HTTP/1.0")]),t._v("情况下使用")])]),t._v(" "),s("li",[s("p",[t._v("两者同时存在时，Cache-Control优先级高于Expires")])])]),t._v(" "),s("p",[s("strong",[t._v("Cache-Control:no-cache")])]),t._v(" "),s("p",[s("code",[t._v("Cache-Control:no-cache")]),t._v("并不是代表着不缓存，而是意味着不走强缓存，直接和服务器进行请求一次，进行协商缓存。")]),t._v(" "),s("p",[s("code",[t._v("Cache-Control:no-store")]),t._v("才是代表着不缓存")]),t._v(" "),s("h4",{attrs:{id:"协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),s("p",[s("strong",[t._v("Last-Modified&If-Modified-Since")])]),t._v(" "),s("p",[t._v("在强缓存过期的情况下，我们希望的是在资源文件没有更新的情况下，即使过期了也不会重新获取资源，而是继续使用旧的资源，这个时候就需要走协商缓存。")]),t._v(" "),s("p",[t._v("在第一次请求资源时，服务器除了会返回给浏览器上面说的过期时间，还会在响应头添加"),s("code",[t._v("Last-Modeified")]),t._v("字段，告诉浏览器该资源的最后修改时间")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("last"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("modified"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),t._v(" Oct "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("08")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("57")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GMT")]),t._v("\n")])])]),s("p",[t._v("然后浏览器再次请求时就会把这个时间再通过另一个字段"),s("code",[t._v("If-Modified-Since")]),t._v("，发送给服务器")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("modified"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("since"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),t._v(" Oct "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("08")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("57")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GMT")]),t._v("\n")])])]),s("p",[t._v("服务器再把这两个字段的时间进行对比，如果一样则说明文件没有被更新，就返回状态码"),s("code",[t._v("304")]),t._v("和空的响应体，浏览器直接拿过期的资源继续使用。")]),t._v(" "),s("p",[s("strong",[t._v("缺点：")])]),t._v(" "),s("ul",[s("li",[t._v("如果服务器那边打开了资源文件，即使没有对文件进行修改，但还是会造成"),s("code",[t._v("Last-Modified")]),t._v("被修改，导致不能命中协商缓存")]),t._v(" "),s("li",[t._v("如果资源有周期性的变化，如资源修改后在一个周期内又修改回原来的样子，我们认为这个周期前的缓存还是可以使用的，但"),s("code",[t._v("Last-Modified")]),t._v("不这么认为。")])]),t._v(" "),s("p",[s("strong",[t._v("ETag&If-None-Match")])]),t._v(" "),s("p",[t._v("为了解决上述问题，引出了"),s("code",[t._v("ETag")]),t._v("和"),s("code",[t._v("If-None-Match")]),t._v("。")]),t._v(" "),s("p",[t._v("第一次请求资源时，服务器还会在响应头上返回"),s("code",[t._v("ETag")]),t._v("，这个字段表示的是当前资源文件的一个唯一标识，这个标识由文件内容生成，能精准地感应文件的变化，只要文件内容不同，"),s("code",[t._v("ETag")]),t._v("就会重新生成。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("etag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("W")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"132489-1627839023000"')]),t._v("\n")])])]),s("p",[t._v("然后浏览器再次请求的时候就会把这个文件标识，再通过另一个字段"),s("code",[t._v("If-None-Match")]),t._v("，再发送给服务器")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("none"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("match"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("W")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"132489-1627839023000"')]),t._v("\n")])])]),s("p",[t._v("服务器会把两个字段的内容进行比对，如果一样，则说明文件内容并没有改变，那么就说明命中了协商缓存。")]),t._v(" "),s("p",[s("strong",[t._v("Last-Modified和ETag的区别")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("ETag感知文件的精准度要高于Last-Modified")])]),t._v(" "),s("li",[s("p",[t._v("同时使用时，服务器会以ETag优先")])]),t._v(" "),s("li",[s("p",[t._v("Last-Modified的性能高于ETag，因为ETag生成过程中需要服务器付出额外开销，会影响服务器性能。")])])]),t._v(" "),s("h4",{attrs:{id:"强缓存和协商缓存的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存和协商缓存的区别"}},[t._v("#")]),t._v(" 强缓存和协商缓存的区别")]),t._v(" "),s("ul",[s("li",[t._v("优先查找强缓存，没有命中再走协商缓存")]),t._v(" "),s("li",[t._v("强缓存不发请求到服务器，有时候资源更新了浏览器还不知道，但是协商缓存会发请求给服务器去检查资源是否有变更")])]),t._v(" "),s("h3",{attrs:{id:"https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),s("h4",{attrs:{id:"http缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http缺点"}},[t._v("#")]),t._v(" HTTP缺点")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("不具备机密性，HTTP是明文传输的，数据有可能泄露")])]),t._v(" "),s("li",[s("p",[t._v("不具备真实性，无法认证发送方的身份，有可能是伪造的")])]),t._v(" "),s("li",[s("p",[t._v("不具备完整性，数据可能被中间人窃取然后篡改")])])]),t._v(" "),s("h4",{attrs:{id:"ssl-tls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssl-tls"}},[t._v("#")]),t._v(" SSL/TLS")]),t._v(" "),s("p",[s("code",[t._v("HTTPS")]),t._v("是超文本传输安全协议，即"),s("code",[t._v("HTTP+SSL/TLS")]),t._v(".")]),t._v(" "),s("p",[t._v("浏览器和服务器通信之前会先进行协商，选出它们都支持的"),s("code",[t._v("加密套件")]),t._v("，用来实现安全的通信。")]),t._v(" "),s("p",[t._v("例如："),s("strong",[t._v("RSA-PSK-AES128-GCM-SHA256，各算法用途如下图")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/webp/22799595/1644235698990-a63ade74-4cee-40b2-b060-0fc2efa70c1d.webp",alt:"img"}})]),t._v(" "),s("h4",{attrs:{id:"对称加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对称加密"}},[t._v("#")]),t._v(" 对称加密")]),t._v(" "),s("p",[t._v("所谓对称加密，就是加密和解密使用同一个密钥。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("浏览器给服务器发送一个随机数"),s("code",[t._v("client-random")]),t._v("和一个支持加密的加密方法列表")])]),t._v(" "),s("li",[s("p",[t._v("服务器给浏览器返回另一个随机数"),s("code",[t._v("server-random")]),t._v("和双方都支持的加密方法")])]),t._v(" "),s("li",[s("p",[t._v("然后两者用加密方法将两个随机数混合生成密钥，这就是通信双方加解密的密钥")])])]),t._v(" "),s("p",[t._v("但是对称加密中，将随机数和加密方法直接传送给对方，过程可能会被窃取，别人就能成功解密拿到数据")]),t._v(" "),s("h4",{attrs:{id:"不对称加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不对称加密"}},[t._v("#")]),t._v(" 不对称加密")]),t._v(" "),s("p",[t._v("就是一对密钥，有"),s("code",[t._v("公钥")]),t._v("和"),s("code",[t._v("私钥")]),t._v("，其中一个密钥加密后的数据，只能让另一个密钥进行解密。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("浏览器给服务器发送一个随机数"),s("code",[t._v("client-random")]),t._v("和一个支持的加密方法列表")])]),t._v(" "),s("li",[s("p",[t._v("服务器把另一个随机数"),s("code",[t._v("server-random")]),t._v("、"),s("code",[t._v("加密方法")]),t._v("、"),s("code",[t._v("公钥")]),t._v("传送给浏览器")])]),t._v(" "),s("li",[s("p",[t._v("浏览器用公钥将两个随机数加密，生成密钥，这个密钥只能由"),s("code",[t._v("私钥")]),t._v("解密")])])]),t._v(" "),s("p",[t._v("由于公钥反推出私钥的过程，在现在计算机运算能力下是可以做到的，所以非对称密钥至少要2048位才能保证安全性，这就导致了每次通信都需要大计算量去加解密，性能比对称加密要差很多。")]),t._v(" "),s("h4",{attrs:{id:"tls的加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tls的加密"}},[t._v("#")]),t._v(" TLS的加密")]),t._v(" "),s("p",[t._v("实际上，TLS用的是两种算法的混合加密。通过"),s("strong",[t._v("非对称加密算法")]),t._v("交换"),s("strong",[t._v("对称加密算法")]),t._v("的密钥，交换之后再全程使用"),s("strong",[t._v("对称加密")]),t._v("进行数据传输。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("浏览器给服务器发送一个随机数"),s("code",[t._v("client-random")]),t._v("和一个支持的加密方法列表")])]),t._v(" "),s("li",[s("p",[t._v("服务器把另一个随机数"),s("code",[t._v("server-random")]),t._v("、"),s("code",[t._v("加密方法")]),t._v("、"),s("code",[t._v("公钥")]),t._v("传回给浏览器")])]),t._v(" "),s("li",[s("p",[t._v("浏览器又生成另一个随机数"),s("code",[t._v("pre-random")]),t._v("，并用"),s("code",[t._v("公钥")]),t._v("加密后传输给服务器")])]),t._v(" "),s("li",[s("p",[t._v("服务器用"),s("code",[t._v("私钥")]),t._v("解密，得到"),s("code",[t._v("pre-random")])])]),t._v(" "),s("li",[s("p",[t._v("浏览器和服务器都将三个随机数用加密方法混合生成最终密钥")])])]),t._v(" "),s("p",[t._v("这样即使被劫持了，中间人没有私钥就拿不到"),s("code",[t._v("pre-random")]),t._v("，就无法生成最终的密钥。")]),t._v(" "),s("h4",{attrs:{id:"数字签名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字签名"}},[t._v("#")]),t._v(" 数字签名")]),t._v(" "),s("p",[t._v("假如在一开始我们就被劫持了，拿到的公钥是中间人的而不是服务器的，数据还是会被窃据，所以数字证书就来了。")]),t._v(" "),s("p",[s("strong",[t._v("数字证书（数字签名）")])]),t._v(" "),s("p",[t._v("数字证书需要向有权威的"),s("code",[t._v("认证机构（CA）")]),t._v("获取授权给服务器。首先，"),s("code",[t._v("服务器")]),t._v("和"),s("code",[t._v("CA")]),t._v("机构分别有一对密钥（公钥和私钥），数字证书的生成过程：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("CA机构通过摘要算法生成服务器公钥的"),s("strong",[t._v("摘要")])])]),t._v(" "),s("li",[s("p",[t._v("CA机构通过"),s("strong",[t._v("CA私钥")]),t._v("以及特定签名算法"),s("strong",[t._v("加密")]),t._v("上述生成的摘要，生成签名")])]),t._v(" "),s("li",[s("p",[t._v("把签名、服务器公钥打包放入"),s("code",[t._v("数字签名")]),t._v("，并返回给服务器")])])]),t._v(" "),s("p",[t._v("服务器配置好证书，以后客户端连接服务器，都先把证书发给客户端验证并获取服务器的公钥")]),t._v(" "),s("p",[s("strong",[t._v("证书验证流程")])]),t._v(" "),s("ul",[s("li",[t._v("使用"),s("strong",[t._v("CA公钥")]),t._v("和声明的签名算法对CA中的签名进行**解密，**得到服务器的公钥的摘要内容")]),t._v(" "),s("li",[t._v("再用摘要算法对证书里面的服务器公钥生成摘要，把这个摘要和上一步得到的摘要进行比对，如果一致则说明证书合法，里面的公钥也是正确的，就可以进行下一步通信")])]),t._v(" "),s("h4",{attrs:{id:"https如何解决http的缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https如何解决http的缺点"}},[t._v("#")]),t._v(" HTTPS如何解决HTTP的缺点")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("机密性")])])]),t._v(" "),s("p",[t._v("信息的机密性HTTPS依靠对称加密和非对称加密来完成，具体参考上述流程")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("完整性")])])]),t._v(" "),s("p",[t._v("信息传输的途中，我们的信息很有可能被第三方进行劫持篡改，通用方法是使用散列算法如MD5将传输内容hash一次得到hash值，即**摘要。**客户端使用密钥对摘要和信息内容进行加密，然后传输给服务端，服务端解密获得原始内容和摘要值，这时服务端使用相同的hash算法对原始内容进行hash，然后把两个hash值进行比对，如果一致则说明信息没有被篡改")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("真实性")])])]),t._v(" "),s("p",[t._v("使用数字证书验证真实性，具体参考上述流程")]),t._v(" "),s("h4",{attrs:{id:"http和https的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http和https的区别"}},[t._v("#")]),t._v(" HTTP和HTTPS的区别")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("HTTP是明文传输，不安全，HTTPS是加密传输的，安全的多")])]),t._v(" "),s("li",[s("p",[t._v("HTTP端口号是80，HTTPS端口号是443")])]),t._v(" "),s("li",[s("p",[t._v("HTTP不用证书，免费，HTTPS需要认证证书，要钱")])]),t._v(" "),s("li",[s("p",[t._v("连接方式不同，HTTP三次握手，HTTPS中TLS1.2版本要7次，TLS1.3要6次")])]),t._v(" "),s("li",[s("p",[t._v("HTTP在应用层，而HTTPS的TLS在传输层")])]),t._v(" "),s("li",[s("p",[t._v("HTTP是无状态的，而HTTPS是有状态的，因为TLS这层需要服务器和客户端去缓存密钥，而不是每个请求都执行一次密钥交换")])])]),t._v(" "),s("h4",{attrs:{id:"https连接过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https连接过程"}},[t._v("#")]),t._v(" HTTPS连接过程")]),t._v(" "),s("p",[t._v("https比http多了一步TLS连接，TLS连接有以下方式")]),t._v(" "),s("p",[s("strong",[t._v("RSA握手")])]),t._v(" "),s("p",[t._v("早期的TLS密钥交换法都是使用RSA算法，它的握手流程如下：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("浏览器给服务器发送一个随机数"),s("code",[t._v("client-random")]),t._v("和一个支持的加密方法列表")])]),t._v(" "),s("li",[s("p",[t._v("服务器把另一个随机数"),s("code",[t._v("server-random")]),t._v("、"),s("code",[t._v("加密方法")]),t._v("、"),s("code",[t._v("公钥")]),t._v("传给浏览器")])]),t._v(" "),s("li",[s("p",[t._v("浏览器又生成另一个随机数"),s("code",[t._v("pre-random")]),t._v("，并用公钥加密后传给浏览器")])]),t._v(" "),s("li",[s("p",[t._v("服务器再用私钥解密，得到"),s("code",[t._v("pre-random")]),t._v("，此时浏览器和服务器都得到了三个随机数，各自将三个随机数用加密方法混合生成最终密钥")])])]),t._v(" "),s("p",[s("strong",[t._v("RSA弊端")])]),t._v(" "),s("p",[t._v("但是如今RSA已经不适用了，因为一旦服务器的私钥泄露了，那么中间人可以通过私钥计算出之前所有报文的"),s("code",[t._v("secret")]),t._v("，破解之前的所有报文。")]),t._v(" "),s("p",[s("strong",[t._v("ECDHE握手")])]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("TLS1.2")]),t._v("版本用的是"),s("code",[t._v("ECDHE密钥交换法")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/webp/22799595/1644245590610-3ab4649d-12bf-47db-b0b1-07f9695fd25f.webp",alt:"img"}})]),t._v(" "),s("ol",[s("li",[s("p",[t._v("浏览器给服务器发送一个随机数"),s("code",[t._v("client-random")]),t._v("，TLS版本和一个支持的加密方法列表")])]),t._v(" "),s("li",[s("p",[t._v("服务器生成一个椭圆曲线参数"),s("code",[t._v("server-params")]),t._v("、随机数"),s("code",[t._v("server-random")]),t._v("、"),s("code",[t._v("加密方法")]),t._v("、"),s("code",[t._v("证书")]),t._v("给浏览器")])]),t._v(" "),s("li",[s("p",[t._v("浏览器又生成椭圆曲线参数"),s("code",[t._v("client-params")]),t._v("，握手数据摘要等信息给服务器")])]),t._v(" "),s("li",[s("p",[t._v("服务器和浏览器两边得到"),s("code",[t._v("server-params")]),t._v("和"),s("code",[t._v("client-params")]),t._v("后用ECDHE算法直接算出"),s("code",[t._v("pre-random")]),t._v("，两边都有三个随机数后，再将三个随机数加密混合生成最终密钥")])])]),t._v(" "),s("p",[t._v("中间椭圆曲线传递过程没有加密，如果被中间人截获了呢，为什么这样就比RSA安全呢？")]),t._v(" "),s("p",[t._v("答案请看下图！中间传递是两个椭圆参数就是图中所说的"),s("strong",[t._v("公钥Q")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/png/22799595/1644246098591-00617ace-5fad-4a02-9080-28f1a9126e1f.png",alt:"img"}})]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("TLS1.3")]),t._v("版本中的握手变成了这样，简化了握手步骤")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/webp/22799595/1644246164250-c44f817d-5cb6-489e-b362-d15814e04481.webp",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"http2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2"}},[t._v("#")]),t._v(" HTTP2")]),t._v(" "),s("h4",{attrs:{id:"二进制分帧层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制分帧层"}},[t._v("#")]),t._v(" 二进制分帧层")]),t._v(" "),s("p",[t._v("HTTP2性能提升的核心在于二进制分帧层。HTTP2是用二进制协议，它采用二进制格式传输数据而不是1.x的文本格式。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/webp/22799595/1644249402541-41f7c584-12c8-4547-8fb2-1c44ebda1b63.webp",alt:"img"}})]),t._v(" "),s("p",[t._v("原来的"),s("code",[t._v("Headers+Body")]),t._v("的报文格式如今被拆分成了一个个二进制的帧，用"),s("strong",[t._v("Header帧")]),t._v("存放头部字段，用"),s("strong",[t._v("Data帧")]),t._v("存放请求体字段。")]),t._v(" "),s("p",[t._v("三个概念：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("流Stream：已建立的TCP连接上的双向字节流，可以承载一个或多个消息")])]),t._v(" "),s("li",[s("p",[t._v("消息Message：一个完整的HTTP请求或响应，由一个或多个帧组成，特定消息的帧在同一个流上发送，这就意味着一个HTTP请求或响应只能在一个流上发送")])]),t._v(" "),s("li",[s("p",[t._v("帧Frame：通信的基本单位")])])]),t._v(" "),s("p",[s("strong",[t._v("一个TCP连接上可以有任意数量的流")])]),t._v(" "),s("h4",{attrs:{id:"多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[t._v("#")]),t._v(" 多路复用")]),t._v(" "),s("p",[t._v("HTTP2完美解决了队头阻塞的问题。")]),t._v(" "),s("p",[t._v("HTTP2让所有的通信都在一个TCP连接上完成，真正实现了请求的并发。HTTP2建立一个TCP连接，一个连接上可以有任意多个流，消息分割成一个或多个帧在各自的流里面传输，也就是一个请求一个流，这样就能同时发多个请求了。帧传输过去之后，再进行重组，形成一个完整的请求或响应，这使得所有的请求或响应都不会被阻塞")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/webp/22799595/1644250073592-f74bbe3f-79f4-4811-a054-eecd01b475ff.webp",alt:"img"}})]),t._v(" "),s("h4",{attrs:{id:"头部压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#头部压缩"}},[t._v("#")]),t._v(" 头部压缩")]),t._v(" "),s("p",[t._v("在1.x版本中，首部用文本格式传输，通常会给每个传输增加500-800字节的开销，而有些请求的一些首部字段都是相同的，例如cookie，user-agent等，HTTP2针对首部字段，采用了对应的压缩算法——HPACK。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("维护一份相同的静态字典，包含常见的头部名称和值")])]),t._v(" "),s("li",[s("p",[t._v("维护一份相同的动态字典，可以动态地添加内容")])]),t._v(" "),s("li",[s("p",[t._v("通过静态Huffman编码对传输的首部字段进行编码")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/webp/22799595/1644250595469-5b1596db-d546-4adf-9fca-d2c6a8be4430.webp",alt:"img"}})]),t._v(" "),s("p",[t._v("所以在传输首部字段时，例如要传递"),s("code",[t._v("method:GET")]),t._v("，那么只需要传递静态字典里面它对应的索引值就可以了，一个字节搞定。像user-agent、cookie这种静态字典里面只有首部名称而没有值的首部，第一次传输需要user-agent在静态字典中的索引以及他的值，值会采用Huffman编码来减少体积。")]),t._v(" "),s("p",[t._v("第一次传输过user-agent之后，浏览器和服务器会把它添加到自己的动态字典中，后续传输只传对应的索引就好了。")]),t._v(" "),s("h4",{attrs:{id:"服务器端推送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器端推送"}},[t._v("#")]),t._v(" 服务器端推送")]),t._v(" "),s("p",[t._v("服务器端推送使得服务器可以预测客户端需要的资源，主动推送到客户端。")]),t._v(" "),s("p",[t._v("例如：客户端请求index.html，服务器端能够额外推送"),s("code",[t._v("script.js")]),t._v("和"),s("code",[t._v("style.css")]),t._v("。实现原理就是客户端发出页面请求时，服务器端能够分析这个页面所依赖的其他资源，主动推送到客户端的缓存，当客户端收到原始页面的请求时，它需要的资源已经位于缓存。")])])}),[],!1,null,null,null);a.default=_.exports}}]);